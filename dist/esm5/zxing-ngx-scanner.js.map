{
  "version": 3,
  "file": "zxing-ngx-scanner.js",
  "sources": [
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/zxing-scanner.module.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/zxing-scanner.component.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/browser-qr-code-reader.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/browser-code-reader.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { ZXingScannerComponent } from './zxing-scanner.component';\n\nexport type ZXingScannerComponent = ZXingScannerComponent;\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    declarations: [ZXingScannerComponent],\n    exports: [ZXingScannerComponent],\n})\nexport class ZXingScannerModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ZXingScannerModule\n        };\n    }\n}\n",
    "import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\n\nimport {Result} from '@zxing/library';\n\nimport {BrowserQRCodeReader} from './browser-qr-code-reader';\n\n@Component({\n    selector: 'zxing-scanner',\n    template: `<video [ngClass]=\"cssClass\" #preview>\n    <p>\n        Your browser does not support this feature, please try to upgrade it.\n    </p>\n    <p>\n        Seu navegador não suporta este recurso, por favor tente atualizá-lo.\n    </p>\n</video>\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy, OnChanges {\n\n    /**\n     * The ZXing code reader.\n     */\n    private codeReader: BrowserQRCodeReader = new BrowserQRCodeReader(1500);\n\n    /**\n     * Says if some native API is supported.\n     */\n    private isEnumerateDevicesSuported: boolean;\n\n    /**\n     * List of enable video-input devices.\n     */\n    private videoInputDevices: MediaDeviceInfo[];\n    /**\n     * The actual device used to scan things.\n     */\n    private videoInputDevice: MediaDeviceInfo;\n\n    /**\n     * Says if the user allowedthe use of the camera or not.\n     */\n    private hasPermission: boolean;\n\n    /**\n     * Reference to the preview element, should be the `video` tag.\n     */\n    @ViewChild('preview')\n    previewElemRef: ElementRef;\n\n    /**\n     * The scan throttling (time between scans) in milliseconds.\n     */\n    @Input()\n    scanThrottling = 1500;\n\n    /**\n     * Allow start scan or not.\n     */\n    @Input()\n    scannerEnabled = true;\n\n    /**\n     * The device that should be used to scan things.\n     */\n    @Input()\n    device: MediaDeviceInfo;\n\n    /**\n     * The value of the HTML video's class attribute.\n     */\n    @Input()\n    cssClass: string;\n\n    /**\n     * Enable or disable autofocus of the camera (might have an impact on performance)\n     */\n    @Input()\n    autofocusEnabled = true;\n\n    /**\n     * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\n     */\n    @Output()\n    scanSuccess = new EventEmitter<string>();\n\n    /**\n     * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\n     */\n    @Output()\n    scanFailure = new EventEmitter<void>();\n\n    /**\n     * Emitts events when a scan throws some error, will inject the error to the callback.\n     */\n    @Output()\n    scanError = new EventEmitter<Error>();\n\n    /**\n     * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\n     */\n    @Output()\n    scanComplete = new EventEmitter<Result>();\n\n    /**\n     * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n     */\n    @Output()\n    camerasFound = new EventEmitter<MediaDeviceInfo[]>();\n\n    /**\n     * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n     */\n    @Output()\n    camerasNotFound = new EventEmitter<any>();\n\n    /**\n     * Emitts events when the users answers for permission.\n     */\n    @Output()\n    permissionResponse = new EventEmitter<boolean>();\n\n    /**\n     * Constructor to build the object and do some DI.\n     */\n    constructor() {\n        this.isEnumerateDevicesSuported = !!(navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Manages the bindinded property changes.\n     * @param changes\n     */\n    ngOnChanges(changes: SimpleChanges): void {\n\n        if (changes.scannerEnabled) {\n            if (!this.scannerEnabled) {\n                this.resetScan();\n            } else if (this.videoInputDevice) {\n                this.scan(this.videoInputDevice.deviceId);\n            }\n        }\n\n        if (changes.device) {\n            if (this.device) {\n                this.changeDevice(this.device);\n            } else {\n                console.warn('zxing-scanner', 'device', 'Unselected device.');\n                this.resetScan();\n            }\n        }\n\n        if (changes.scanThrottling) {\n            this.setCodeReaderThrottling(this.scanThrottling);\n        }\n    }\n\n    /**\n     * Executed after the view initialization.\n     */\n    ngAfterViewInit(): void {\n\n        // Chrome 63 fix\n        if (!this.previewElemRef) {\n            console.warn('zxing-scanner', 'Preview element not found!');\n            return;\n        }\n\n        // iOS 11 Fix\n        this.previewElemRef.nativeElement.setAttribute('autoplay', false);\n        this.previewElemRef.nativeElement.setAttribute('muted', true);\n        this.previewElemRef.nativeElement.setAttribute('playsinline', true);\n        this.previewElemRef.nativeElement.setAttribute('autofocus', this.autofocusEnabled);\n\n        this.askForPermission().subscribe((hasPermission: boolean) => {\n\n            if (hasPermission) {\n\n                // gets and enumerates all video devices\n                this.enumarateVideoDevices((videoInputDevices: MediaDeviceInfo[]) => {\n\n                    if (videoInputDevices && videoInputDevices.length > 0) {\n                        this.camerasFound.next(videoInputDevices);\n                    } else {\n                        this.camerasNotFound.next();\n                    }\n\n                });\n\n                this.startScan(this.videoInputDevice);\n\n            } else {\n                console.warn('User has denied permission.');\n            }\n\n        });\n    }\n\n    /**\n     * Executes some actions before destroy the component.\n     */\n    ngOnDestroy(): void {\n        this.resetScan();\n    }\n\n    /**\n     * Starts a new QR-scanner to set a new scan throttling.\n     *\n     * @param throttling The scan speed in milliseconds.\n     */\n    setCodeReaderThrottling(throttling: number): void {\n        this.codeReader = new BrowserQRCodeReader(throttling);\n    }\n\n    /**\n     * Properly changes the actual target device.\n     *\n     * @param device\n     */\n    changeDevice(device: MediaDeviceInfo): void {\n        this.videoInputDevice = device;\n        this.startScan(device);\n    }\n\n    /**\n     * Properly changes the actual target device using it's deviceId.\n     *\n     * @param deviceId\n     */\n    changeDeviceById(deviceId: string): void {\n        this.changeDevice(this.getDeviceById(deviceId));\n    }\n\n    /**\n     * Properly returns the target device using it's deviceId.\n     *\n     * @param deviceId\n     */\n    getDeviceById(deviceId: string): MediaDeviceInfo {\n        return this.videoInputDevices.find(device => device.deviceId === deviceId);\n    }\n\n    /**\n     * Gets and registers all cammeras.\n     */\n    askForPermission(): EventEmitter<boolean> {\n\n        // Will try to ask for permission\n        navigator\n            .mediaDevices\n            .getUserMedia({audio: false, video: true})\n            .then((stream: MediaStream) => {\n\n                try {\n\n                    // Start stream so Browser can display permission-dialog (\"Website wants to access your camera, allow?\")\n                    this.previewElemRef.nativeElement.srcObject = stream;\n\n                    // After permission was granted, we can stop it again\n                    stream.getVideoTracks().forEach(track => {\n                        track.stop();\n                    });\n\n                    this.previewElemRef.nativeElement.srcObject = undefined;\n\n                    // if the scripts lives until here, that's only one mean:\n\n                    // permission granted\n                    this.hasPermission = true;\n\n                    this.permissionResponse.next(this.hasPermission);\n\n                } catch (err) {\n\n                    console.error('zxing-scanner', 'askForPermission', err);\n\n                    // permission aborted\n                    this.hasPermission = undefined;\n\n                    this.permissionResponse.next(undefined);\n                }\n\n            })\n            .catch((err: DOMException) => {\n\n                // failed to grant permission to video input\n\n                console.warn('zxing-scanner', 'askForPermission', err);\n\n                switch (err.name) {\n\n                    case 'NotAllowedError':\n\n                        // permission denied\n                        this.hasPermission = false;\n\n                        this.permissionResponse.next(this.hasPermission);\n                        break;\n\n                    case 'NotFoundError':\n                        this.camerasNotFound.next(err);\n                        break;\n\n                    default:\n                        this.permissionResponse.next(undefined);\n                        break;\n\n                }\n\n            });\n\n        // Returns the event emitter, so thedev can subscribe to it\n        return this.permissionResponse;\n    }\n\n    /**\n     * Starts the continuous scanning for the given device.\n     *\n     * @param deviceId The deviceId from the device.\n     */\n    scan(deviceId: string): void {\n        try {\n\n            this.codeReader.decodeFromInputVideoDevice((result: any) => {\n\n                console.debug('zxing-scanner', 'scan', 'result: ', result);\n\n                if (result) {\n                    this.dispatchScanSuccess(result);\n                } else {\n                    this.dispatchScanFailure();\n                }\n\n                this.dispatchScanComplete(result);\n\n            }, deviceId, this.previewElemRef.nativeElement);\n\n        } catch (err) {\n            this.dispatchScanError(err);\n            this.dispatchScanComplete(undefined);\n        }\n    }\n\n    /**\n     * Starts the scanning if allowed.\n     *\n     * @param device The device to be used in the scan.\n     */\n    startScan(device: MediaDeviceInfo): void {\n        if (this.scannerEnabled && device) {\n            this.scan(device.deviceId);\n        }\n    }\n\n    /**\n     * Stops the scan service.\n     */\n    resetScan(): void {\n        this.codeReader.reset();\n    }\n\n    /**\n     * Dispatches the scan success event.\n     *\n     * @param result the scan result.\n     */\n    private dispatchScanSuccess(result: Result): void {\n        this.scanSuccess.next(result.getText());\n    }\n\n    /**\n     * Dispatches the scan failure event.\n     */\n    private dispatchScanFailure(): void {\n        this.scanFailure.next();\n    }\n\n    /**\n     * Dispatches the scan error event.\n     *\n     * @param err the error thing.\n     */\n    private dispatchScanError(error: any): void {\n        this.scanError.next(error);\n    }\n\n    /**\n     * Dispatches the scan event.\n     *\n     * @param result the scan result.\n     */\n    private dispatchScanComplete(result: Result): void {\n        this.scanComplete.next(result);\n    }\n\n    /**\n     * Enumerates all the available devices.\n     *\n     * @param successCallback\n     */\n    enumarateVideoDevices(successCallback: any): void {\n\n        if (!this.isEnumerateDevicesSuported) {\n            console.error('zxing-scanner', 'enumarateVideoDevices', 'Can\\'t enumerate devices, method not supported.');\n            return;\n        }\n\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\n\n            this.videoInputDevices = [];\n\n            for (const deviceI of devices) {\n\n                // @todo type this as `MediaDeviceInfo`\n                const device: any = {};\n\n                // tslint:disable-next-line:forin\n                for (const key in deviceI) {\n                    device[key] = deviceI[key];\n                }\n\n                if (device.kind === 'video') {\n                    device.kind = 'videoinput';\n                }\n\n                if (!device.deviceId) {\n                    device.deviceId = (<any>device).id;\n                }\n\n                if (!device.label) {\n                    device.label = 'Camera (no-permission)';\n                }\n\n                if (device.kind === 'videoinput') {\n                    this.videoInputDevices.push(device);\n                }\n            }\n\n            successCallback(this.videoInputDevices);\n        });\n    }\n}\n",
    "import { QRCodeReader } from '@zxing/library';\n\nimport { BrowserCodeReader } from './browser-code-reader';\n\nexport class BrowserQRCodeReader extends BrowserCodeReader {\n    public constructor(timeBetweenScansMillis: number = 500) {\n        super(new QRCodeReader(), timeBetweenScansMillis);\n    }\n}\n",
    "import {\n    Reader,\n    BinaryBitmap,\n    HybridBinarizer,\n    Result,\n    Exception,\n    HTMLCanvasElementLuminanceSource,\n} from '@zxing/library';\n\n/**\n * Based on zxing-typescript BrowserCodeReader\n */\nexport class BrowserCodeReader {\n\n    /**\n     * The HTML video element, used to display the camera stream.\n     */\n    private videoElement: HTMLVideoElement;\n    /**\n     * Should contain the actual registered listener for video play-ended,\n     * used to unregister that listener when needed.\n     */\n    private videoPlayEndedEventListener: EventListener;\n    /**\n     * Should contain the actual registered listener for video playing,\n     * used to unregister that listener when needed.\n     */\n    private videoPlayingEventListener: EventListener;\n    /**\n     * Should contain the actual registered listener for video loaded-metadata,\n     * used to unregister that listener when needed.\n     */\n    private videoLoadedMetadataEventListener: EventListener;\n\n    /**\n     * The HTML image element, used as a fallback for the video element when decoding.\n     */\n    private imageElement: HTMLImageElement;\n    /**\n     * Should contain the actual registered listener for image loading,\n     * used to unregister that listener when needed.\n     */\n    private imageLoadedEventListener: EventListener;\n\n    /**\n     * The HTML canvas element, used to draw the video or image's frame for decoding.\n     */\n    private canvasElement: HTMLCanvasElement;\n    /**\n     * The HTML canvas element context.\n     */\n    private canvasElementContext: CanvasRenderingContext2D;\n\n    /**\n     * The continuous scan timeout Id.\n     */\n    private timeoutHandler: number;\n\n    /**\n     * The stream output from camera.\n     */\n    private stream: MediaStream;\n\n    /**\n     * Constructor for dependency injection.\n     *\n     * @param reader The barcode reader to be used to decode the stream.\n     * @param timeBetweenScans The scan throttling in milliseconds.\n     */\n    public constructor(private reader: Reader, private timeBetweenScans: number = 500) { }\n\n    /**\n     * Starts the decoding from the actual or a new video element.\n     *\n     * @param callbackFn The callback to be executed after every scan attempt\n     * @param deviceId The device's to be used Id\n     * @param videoElement A new video element\n     */\n    public decodeFromInputVideoDevice(callbackFn: (result: Result) => any, deviceId?: string, videoElement?: HTMLVideoElement): void {\n\n        this.reset();\n\n        this.prepareVideoElement(videoElement);\n\n        const video = deviceId === undefined\n            ? { facingMode: { exact: 'environment' } }\n            : { deviceId: { exact: deviceId } };\n\n        const constraints: MediaStreamConstraints = {\n            audio: false,\n            video\n        };\n\n        navigator\n            .mediaDevices\n            .getUserMedia(constraints)\n            .then((stream: MediaStream) => this.startDecodeFromStream(stream, callbackFn))\n            .catch((err: any) => {\n                /* handle the error, or not */\n                console.error(err);\n            });\n    }\n\n    /**\n     * Sets the new stream and request a new decoding-with-delay.\n     *\n     * @param stream The stream to be shown in the video element.\n     * @param callbackFn A callback for the decode method.\n     */\n    private startDecodeFromStream(stream: MediaStream, callbackFn: (result: Result) => any): void {\n\n        this.stream = stream;\n\n        // Older browsers may not have srcObject\n        if ('srcObject' in this.videoElement) {\n            // @NOTE Throws Exception if interrupted by a new loaded request\n            this.videoElement.srcObject = this.stream;\n        } else {\n            // @NOTE Avoid using this in new browsers, as it is going away.\n            (<HTMLVideoElement>this.videoElement).src = window.URL.createObjectURL(stream);\n        }\n\n        this.videoPlayingEventListener = () => {\n            this.decodeWithDelay(callbackFn);\n        };\n\n        this.videoElement.addEventListener('play', this.videoPlayingEventListener);\n\n        this.videoLoadedMetadataEventListener = () => {\n            this.videoElement.play();\n        };\n\n        this.videoElement.addEventListener('loadedmetadata', this.videoLoadedMetadataEventListener);\n    }\n\n    /**\n     * Sets a HTMLVideoElement for scanning or creates a new one.\n     *\n     * @param videoElement The HTMLVideoElement to be set.\n     */\n    private prepareVideoElement(videoElement?: HTMLVideoElement) {\n        if (!videoElement) {\n            this.videoElement = document.createElement('video');\n            this.videoElement.width = 200;\n            this.videoElement.height = 200;\n        } else {\n            this.videoElement = videoElement;\n        }\n    }\n\n    /**\n     *\n     * @param callbackFn\n     */\n    private decodeWithDelay(callbackFn: (result: Result) => any): void {\n        if (this.videoElement || this.imageElement) {\n            this.timeoutHandler = window.setTimeout(this.decode.bind(this, callbackFn), this.timeBetweenScans);\n        }\n\n    }\n\n    /**\n     * Does the real image decoding job.\n     *\n     * @param callbackFn\n     * @param retryIfNotFound\n     * @param retryIfChecksumOrFormatError\n     * @param once\n     */\n    private decode(\n        callbackFn: (result: Result) => any,\n        retryIfNotFound: boolean = true,\n        retryIfChecksumOrFormatError: boolean = true,\n        once = false\n    ): void {\n\n        if (undefined === this.canvasElementContext) {\n            this.prepareCaptureCanvas();\n        }\n\n        this.canvasElementContext.drawImage(this.videoElement || this.imageElement, 0, 0);\n\n        const luminanceSource = new HTMLCanvasElementLuminanceSource(this.canvasElement);\n        const binaryBitmap = new BinaryBitmap(new HybridBinarizer(luminanceSource));\n\n        try {\n\n            const result = this.readerDecode(binaryBitmap);\n\n            callbackFn(result);\n\n            // if (!once && !!this.stream) {\n            //     setTimeout(() => this.decodeWithDelay(callbackFn), this.timeBetweenScans);\n            // }\n\n        } catch (re) {\n\n            console.debug(retryIfChecksumOrFormatError, re);\n\n            if (retryIfNotFound && Exception.isOfType(re, Exception.NotFoundException)) {\n\n                console.debug('zxing-scanner', 'QR-code not-found, trying again...');\n\n                this.decodeWithDelay(callbackFn);\n\n            } else if (\n                retryIfChecksumOrFormatError &&\n                (\n                    Exception.isOfType(re, Exception.ChecksumException) ||\n                    Exception.isOfType(re, Exception.FormatException)\n                )\n            ) {\n                console.warn('zxing-scanner', 'Checksum or format error, trying again...', re);\n\n                this.decodeWithDelay(callbackFn);\n            }\n        }\n    }\n\n    /**\n     * Alias for this.reader.decode\n     *\n     * @param binaryBitmap\n     */\n    protected readerDecode(binaryBitmap: BinaryBitmap): Result {\n        return this.reader.decode(binaryBitmap);\n    }\n\n    /**\n     * 🖌 Prepares the canvas for capture and scan frames.\n     */\n    private prepareCaptureCanvas() {\n\n        const canvasElement = document.createElement('canvas');\n\n        let width: number;\n        let height: number;\n\n        if (undefined !== this.videoElement) {\n            width = this.videoElement.videoWidth;\n            height = this.videoElement.videoHeight;\n        } else {\n            width = this.imageElement.naturalWidth || this.imageElement.width;\n            height = this.imageElement.naturalHeight || this.imageElement.height;\n        }\n\n        canvasElement.style.width = width + 'px';\n        canvasElement.style.height = height + 'px';\n        canvasElement.width = width;\n        canvasElement.height = height;\n\n        this.canvasElement = canvasElement;\n        this.canvasElementContext = canvasElement.getContext('2d');\n    }\n\n    /**\n     * Stops the continuous scan and cleans the stream.\n     */\n    private stop(): void {\n\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n\n        if (this.stream) {\n            this.stream.getTracks()[0].stop();\n            this.stream = null;\n        }\n\n    }\n\n    /**\n     * Resets the scanner and it's configurations.\n     */\n    public reset(): void {\n\n        // stops the camera, preview and scan 🔴\n\n        this.stop();\n\n        if (this.videoElement) {\n\n            // first gives freedon to the element 🕊\n\n            if (undefined !== this.videoPlayEndedEventListener) {\n                this.videoElement.removeEventListener('ended', this.videoPlayEndedEventListener);\n            }\n\n            if (undefined !== this.videoPlayingEventListener) {\n                this.videoElement.removeEventListener('play', this.videoPlayingEventListener);\n            }\n\n            if (undefined !== this.videoLoadedMetadataEventListener) {\n                this.videoElement.removeEventListener('loadedmetadata', this.videoLoadedMetadataEventListener);\n            }\n\n            // then forgets about that element 😢\n\n            // Clear the stream\n            if (this.videoElement.srcObject) (<any>this.videoElement.srcObject).getTracks()[0].stop();\n\n            this.videoElement.srcObject = undefined;\n            this.videoElement.removeAttribute('src');\n            this.videoElement = undefined;\n        }\n\n        if (this.imageElement) {\n\n            // first gives freedon to the element 🕊\n\n            if (undefined !== this.videoPlayEndedEventListener) {\n                this.imageElement.removeEventListener('load', this.imageLoadedEventListener);\n            }\n\n            // then forgets about that element 😢\n\n            this.imageElement.src = undefined;\n            this.imageElement.removeAttribute('src');\n            this.imageElement = undefined;\n        }\n\n        // cleans canvas references 🖌\n\n        this.canvasElementContext = undefined;\n        this.canvasElement = undefined;\n    }\n}\n"
  ],
  "names": [
    "tslib_1.__values",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
